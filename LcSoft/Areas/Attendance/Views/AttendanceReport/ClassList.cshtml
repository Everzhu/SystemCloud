@model XkSystem.Areas.Attendance.Models.AttendanceReport.ClassList

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken();
    <div class="row">
        <div class="col-xs-6">
            <h4>考勤统计</h4>
        </div>
        <div class="col-xs-6 text-right">
            <div class="btn-group">
                <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">
                    <span class="glyphicon glyphicon-export"></span>
                    @Resources.LocalizedText.BtnExport
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu dropdown-menu-right">
                    <li><a href="@Url.Action("ClassListExport", new { DateSearchFrom = Model.DateSearchFrom,DateSearchTo = Model.DateSearchTo, SearchText = Model.SearchText})">@Resources.LocalizedText.BtnExportToExcel</a></li>
                </ul>
            </div>
        </div>
    </div>
    <hr />
    <nav class="navbar">
        <div class="navbar-left navbar-form">
            <div class="btn-group form-group">
                <a class="btn btn-warning active" href="@Url.Action("ClassList", "AttendanceReport")">汇总(行政班)</a>
                <a class="btn btn-default" href="@Url.Action("AttendanceAll", "Attendance")">汇总(教学班)</a>
                <a class="btn btn-default" href="@Url.Action("AttendanceDetail", "Attendance")">异常明细</a>
            </div>
            <div class="form-group">
                <div class="input-group date form_datetime fdate" style="width:160px;">
                    @Html.TextBoxFor(d => d.DateSearchFrom, XkSystem.Code.Common.FormatToDate, new { @class = "form-control", @readonly = "readonly" })
                    <span class="input-group-addon"><span class="glyphicon glyphicon-calendar text-primary"></span></span>
                </div>
            </div>
            <span>-</span>
            <div class="form-group">
                <div class="input-group date form_datetime fdate" style="width:160px;">
                    @Html.TextBoxFor(d => d.DateSearchTo, XkSystem.Code.Common.FormatToDate, new { @class = "form-control", @readonly = "readonly" })
                    <span class="input-group-addon"><span class="glyphicon glyphicon-calendar text-primary"></span></span>
                </div>
            </div>
            <div class="input-group form-group">
                @Html.TextBoxFor(d => d.SearchText, new { @class = "form-control searchText", placeholder = Resources.LocalizedText.TipSearch })
                <span class="input-group-btn">
                    <button class="btn btn-primary" type="submit">
                        <span class="glyphicon glyphicon-search"></span>
                    </button>
                </span>
            </div>
        </div>
    </nav>
    <div class="table-responsive">
        <fieldset>
            <legend>
                <span class="label label-success" style="font-size:14px;">全校考勤</span>
            </legend>
        </fieldset>
        <table class="table table-bordered table-hover table-striped">
            <thead>
                <tr>
                    <th style="width:150px;">考勤类型</th>
                    @foreach (var type in Model.AttendanceTypeList)
                    {
                        <td>@type.Text</td>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>异常人数</td>
                    @foreach (var type in Model.AttendanceTypeList)
                    {
                        <td>
                            @{
                                var typeCount = Model.AttendanceClassList.Where(d => d.AttendanceTypeId == type.Value.ConvertToInt()).Count();
                            }
                            @if (typeCount > decimal.Zero)
                            {
                                <span class="label label-primary">@typeCount</span>
                            }
                            else
                            {
                                @(typeCount)
                            }
                        </td>
                    }
                </tr>
            </tbody>
        </table>
        <fieldset>
            <legend>
                <span class="label label-primary" style="font-size:14px;">班级考勤</span>
            </legend>
        </fieldset>
        <table class="table table-bordered table-hover table-striped">
            <thead>
                <tr>
                    <th style="width:150px;">行政班</th>
                    @foreach (var type in Model.AttendanceTypeList)
                    {
                        <td>@type.Text</td>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var a in Model.AttendanceClassList.GroupBy(d => new { d.ClassId, d.ClassName, d.ClassNo }).Select(g => new { g.Key.ClassId, g.Key.ClassName, g.Key.ClassNo }).OrderBy(g => g.ClassNo))
                {
                    <tr>
                        <td>@a.ClassName</td>
                        @foreach (var type in Model.AttendanceTypeList)
                        {
                            <td>
                                @{
                                    var typeCountAll = Model.AttendanceClassList.Where(d => d.AttendanceTypeId == type.Value.ConvertToInt() && d.ClassId == a.ClassId).Count();
                                }
                                @if (typeCountAll > decimal.Zero)
                                {
                                    <span class="label label-primary">@typeCountAll</span>
                                }
                                else
                                {
                                    @(typeCountAll)
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}